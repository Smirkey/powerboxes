{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#powerboxes","title":"PowerBoxes","text":"<p>Powerboxes is a package containing utility functions for transforming bounding boxes and computing metrics. It is implemented in both Python and Rust. It shows a significant speedup over the equivalent numpy implementations in Python, or other libraries such as shapely or torchvision.</p> <p>See source code here</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install powerboxes\n</code></pre>"},{"location":"#example-usage","title":"Example Usage","text":"<pre><code>import powerboxes as pb\nimport numpy as np\n\n# Create a bounding box\nbox = np.array([[0, 0, 1, 1]])\n\n# Compute the area of the box\narea = pb.box_areas(box)\n\n# Compute the intersection of the box with itself\nintersection = pb.iou_distance(box, box)\n</code></pre> <p>supported dtypes by most functions</p>"},{"location":"#powerboxes.supported_dtypes","title":"<code>powerboxes.supported_dtypes = ['float64', 'float32', 'int16', 'int32', 'int64', 'uint8', 'uint16', 'uint32', 'uint64']</code>  <code>module-attribute</code>","text":""},{"location":"box_filtering/","title":"Box filtering","text":""},{"location":"box_filtering/#powerboxes.remove_small_boxes","title":"<code>powerboxes.remove_small_boxes(boxes, min_size)</code>","text":"<p>Remove boxes with area less than min_area.</p> <p>Parameters:</p> Name Type Description Default <code>boxes</code> <code>NDArray[T]</code> <p>2d array of boxes in xyxy format</p> required <code>min_size</code> <code>float</code> <p>minimum area of boxes to keep</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>if boxes is not numpy array</p> <p>Returns:</p> Type Description <code>NDArray[T]</code> <p>np.ndarray: 2d array of boxes in xyxy format</p>"},{"location":"box_filtering/#powerboxes.nms","title":"<code>powerboxes.nms(boxes, scores, iou_threshold, score_threshold)</code>","text":"<p>Apply non-maximum suppression to boxes.</p> <p>Parameters:</p> Name Type Description Default <code>boxes</code> <code>NDArray[T]</code> <p>2d array of boxes in xyxy format</p> required <code>scores</code> <code>NDArray[float64]</code> <p>1d array of scores</p> required <code>iou_threshold</code> <code>float</code> <p>threshold for iou</p> required <code>score_threshold</code> <code>float</code> <p>threshold for scores</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>if boxes or scores are not numpy arrays</p> <p>Returns:</p> Type Description <code>NDArray[uint64]</code> <p>npt.NDArray[np.uint64]: 1d array of indices to keep</p>"},{"location":"box_filtering/#powerboxes.rtree_nms","title":"<code>powerboxes.rtree_nms(boxes, scores, iou_threshold, score_threshold)</code>","text":"<p>Apply non-maximum suppression to boxes.</p> <p>Uses an rtree to speed up computation. This is only available for signed integer dtypes and float32 and float64.</p> <p>Parameters:</p> Name Type Description Default <code>boxes</code> <code>NDArray[Union[float64, float32, int64, int32, int16]]</code> <p>2d array of boxes in xyxy format</p> required <code>scores</code> <code>NDArray[float64]</code> <p>1d array of scores</p> required <code>iou_threshold</code> <code>float</code> <p>threshold for iou</p> required <code>score_threshold</code> <code>float</code> <p>threshold for scores</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>if boxes or scores are not numpy arrays</p> <p>Returns:</p> Type Description <code>NDArray[uint64]</code> <p>npt.NDArray[np.uint64]: 1d array of indices to keep</p>"},{"location":"box_ops/","title":"Box operations","text":""},{"location":"box_ops/#powerboxes.boxes_areas","title":"<code>powerboxes.boxes_areas(boxes)</code>","text":"<p>Compute areas of boxes.</p> <p>Parameters:</p> Name Type Description Default <code>boxes</code> <code>NDArray[T]</code> <p>2d array of boxes in xyxy format</p> required <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>np.ndarray: 1d array of areas</p>"},{"location":"box_ops/#powerboxes.box_convert","title":"<code>powerboxes.box_convert(boxes, in_fmt, out_fmt)</code>","text":"<p>Convert boxes from one format to another.</p> Available formats are <ul> <li>'xyxy': (xmin, ymin, xmax, ymax)</li> <li>'xywh': (xmin, ymin, width, height)</li> <li>'cxcywh': (center_x, center_y, width, height)</li> </ul> <p>Parameters:</p> Name Type Description Default <code>boxes</code> <code>NDArray[T]</code> <p>2d array of boxes in in_fmt</p> required <code>in_fmt</code> <code>str</code> <p>format of input boxes</p> required <code>out_fmt</code> <code>str</code> <p>format of output boxes</p> required <p>Returns:</p> Type Description <code>NDArray[T]</code> <p>np.ndarray: boxes in out_fmt</p>"},{"location":"box_ops/#powerboxes.masks_to_boxes","title":"<code>powerboxes.masks_to_boxes(masks)</code>","text":"<p>Convert masks to boxes in xyxy format.</p> <p>Parameters:</p> Name Type Description Default <code>masks</code> <code>NDArray[bool_]</code> <p>3d array of masks in (N, H, W) format</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>if masks is not numpy array</p> <p>Returns:</p> Type Description <code>NDArray[uint64]</code> <p>npt.NDArray[np.uint64]: 2d array of boxes in xyxy format</p>"},{"location":"metrics/","title":"Box metrics","text":""},{"location":"metrics/#powerboxes.iou_distance","title":"<code>powerboxes.iou_distance(boxes1, boxes2)</code>","text":"<p>Compute pairwise box iou distances.</p> <p>Parameters:</p> Name Type Description Default <code>boxes1</code> <code>NDArray[T]</code> <p>2d array of boxes in xyxy format</p> required <code>boxes2</code> <code>NDArray[T]</code> <p>2d array of boxes in xyxy format</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>if boxes1 or boxes2 are not numpy arrays</p> <code>ValueError</code> <p>if boxes1 and boxes2 have different dtypes</p> <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>np.ndarray: 2d matrix of pairwise distances</p>"},{"location":"metrics/#powerboxes.parallel_iou_distance","title":"<code>powerboxes.parallel_iou_distance(boxes1, boxes2)</code>","text":"<p>Compute pairwise box iou distances, in parallel.</p> <p>Parameters:</p> Name Type Description Default <code>boxes1</code> <code>NDArray[T]</code> <p>2d array of boxes in xyxy format</p> required <code>boxes2</code> <code>NDArray[T]</code> <p>2d array of boxes in xyxy format</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>if boxes1 or boxes2 are not numpy arrays</p> <code>ValueError</code> <p>if boxes1 and boxes2 have different dtypes</p> <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>np.ndarray: 2d matrix of pairwise distances</p>"},{"location":"metrics/#powerboxes.giou_distance","title":"<code>powerboxes.giou_distance(boxes1, boxes2)</code>","text":"<p>Compute pairwise box giou distances.</p> <p>see here for giou distance definition</p> <p>Parameters:</p> Name Type Description Default <code>boxes1</code> <code>NDArray[T]</code> <p>2d array of boxes in xyxy format</p> required <code>boxes2</code> <code>NDArray[T]</code> <p>2d array of boxes in xyxy format</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>if boxes1 or boxes2 are not numpy arrays</p> <code>ValueError</code> <p>if boxes1 and boxes2 have different dtypes</p> <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>np.ndarray: 2d matrix of pairwise distances</p>"},{"location":"metrics/#powerboxes.parallel_giou_distance","title":"<code>powerboxes.parallel_giou_distance(boxes1, boxes2)</code>","text":"<p>Compute pairwise box giou distances, in parallel.</p> <p>see here for giou distance definition</p> <p>Parameters:</p> Name Type Description Default <code>boxes1</code> <code>NDArray[T]</code> <p>2d array of boxes in xyxy format</p> required <code>boxes2</code> <code>NDArray[T]</code> <p>2d array of boxes in xyxy format</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>if boxes1 or boxes2 are not numpy arrays</p> <code>ValueError</code> <p>if boxes1 and boxes2 have different dtypes</p> <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>np.ndarray: 2d matrix of pairwise distances</p>"},{"location":"metrics/#powerboxes.diou_distance","title":"<code>powerboxes.diou_distance(boxes1, boxes2)</code>","text":"<p>Compute pairwise box diou distances.</p> <p>DIoU distance is defined in https://arxiv.org/pdf/1911.08287.pdf</p> <p>Parameters:</p> Name Type Description Default <code>boxes1</code> <code>NDArray[Union[float32, float64]]</code> <p>2d array of boxes in xyxy format</p> required <code>boxes2</code> <code>NDArray[Union[float32, float64]]</code> <p>2d array of boxes in xyxy format</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>if boxes1 or boxes2 are not numpy arrays</p> <code>ValueError</code> <p>if boxes1 and boxes2 have different dtypes</p> <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>np.ndarray: 2d matrix of pairwise distances</p>"},{"location":"metrics/#powerboxes.tiou_distance","title":"<code>powerboxes.tiou_distance(boxes1, boxes2)</code>","text":"<p>Compute pairwise box tiou (tracking iou)  distances.</p> <p>see here for tiou definition</p> <p>Parameters:</p> Name Type Description Default <code>boxes1</code> <code>NDArray[T]</code> <p>2d array of boxes in xyxy format</p> required <code>boxes2</code> <code>NDArray[T]</code> <p>2d array of boxes in xyxy format</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>if boxes1 or boxes2 are not numpy arrays</p> <code>ValueError</code> <p>if boxes1 and boxes2 have different dtypes</p> <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>np.ndarray: 2d matrix of pairwise distances</p>"},{"location":"rotated_box/","title":"Rotated box operations","text":""},{"location":"rotated_box/#powerboxes.rotated_iou_distance","title":"<code>powerboxes.rotated_iou_distance(boxes1, boxes2)</code>","text":"<p>Compute the pairwise iou distance between rotated boxes</p> <p>Boxes should be in (cx, cy, w, h, a) format where cx and cy are center coordinates, w and h width and height and a, the angle in degrees</p> <p>Parameters:</p> Name Type Description Default <code>boxes1</code> <code>NDArray[float64]</code> <p>2d array of boxes in cxywha format</p> required <code>boxes2</code> <code>NDArray[float64]</code> <p>2d array of boxes in cxywha format</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>if boxes1 or boxes2 are not numpy arrays</p> <code>ValueError</code> <p>if boxes1 and boxes2 have different dtypes</p> <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>np.ndarray: 2d matrix of pairwise distances</p>"},{"location":"rotated_box/#powerboxes.rotated_giou_distance","title":"<code>powerboxes.rotated_giou_distance(boxes1, boxes2)</code>","text":"<p>Compute the pairwise giou distance between rotated boxes</p> <p>Boxes should be in (cx, cy, w, h, a) format where cx and cy are center coordinates, w and h width and height and a, the angle in degrees</p> <p>Parameters:</p> Name Type Description Default <code>boxes1</code> <code>NDArray[float64]</code> <p>2d array of boxes in cxywha format</p> required <code>boxes2</code> <code>NDArray[float64]</code> <p>2d array of boxes in cxywha format</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>if boxes1 or boxes2 are not numpy arrays</p> <code>ValueError</code> <p>if boxes1 and boxes2 have different dtypes</p> <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>np.ndarray: 2d matrix of pairwise distances</p>"},{"location":"rotated_box/#powerboxes.rotated_tiou_distance","title":"<code>powerboxes.rotated_tiou_distance(boxes1, boxes2)</code>","text":"<p>Compute pairwise box tiou (tracking iou)  distances.</p> <p>see here for tiou definition</p> <p>Boxes should be in (cx, cy, w, h, a) format where cx and cy are center coordinates, w and h width and height and a, the angle in degrees</p> <p>Parameters:</p> Name Type Description Default <code>boxes1</code> <code>NDArray[float64]</code> <p>2d array of boxes in cxywha format</p> required <code>boxes2</code> <code>NDArray[float64]</code> <p>2d array of boxes in cxywha format</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>if boxes1 or boxes2 are not numpy arrays</p> <code>ValueError</code> <p>if boxes1 and boxes2 have different dtypes</p> <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>np.ndarray: 2d matrix of pairwise distances</p>"}]}